{"version":3,"sources":["components/Test/TestComponent.js"],"names":["TestComponent","props","_useState","useState","_useState2","Object","_home_slayermass_WebstormProjects_cra_latest_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","name","setName","_useState3","Math","pow","count","_useState4","setCount","_useState5","_useState6","prevCount","setPrevCount","textInputRef","useRef","useEffect","console","log","timer","setTimeout","_incr","clearTimeout","memoizedValue","useMemo","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","type","defaultValue","onChange","e","target","value","ref","onClick","current","focus"],"mappings":"yKAEaA,EAAgB,SAAAC,GAAS,IAAAC,EACZC,mBAAS,QADGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC7BK,EAD6BH,EAAA,GACvBI,EADuBJ,EAAA,GAAAK,EAGVN,mBAAQO,KAAAC,IAACV,EAAMW,MAAS,IAHdC,EAAAR,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAG7BG,EAH6BC,EAAA,GAGtBC,EAHsBD,EAAA,GAAAE,EAIFZ,mBAAS,MAJPa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAI7BE,EAJ6BD,EAAA,GAIlBE,EAJkBF,EAAA,GAK9BG,EAAeC,iBAAO,MAE5BC,oBACE,WACEC,QAAQC,IAAI,qBACZ,IAAMC,EAAQC,WAAWC,EAAO,KAEhC,OAAO,WACLJ,QAAQC,IAAI,yJACZI,aAAaH,KAGjB,CAAC,IAGHH,oBAAU,WAQR,OAPAC,QAAQC,IAAI,qBAAsBtB,GAE9BA,EAAMW,QAAUK,IAClBC,EAAajB,EAAMW,OACnBE,EAAQJ,KAAAC,IAACV,EAAMW,MAAS,KAGnB,WACLU,QAAQC,IAAI,8KAIhB,IAAMK,EAAgBC,kBACpB,WAEE,OADAP,QAAQC,IAAI,gJACLX,GAAS,GAElB,CAACA,IAGGc,EAAQ,kBACZZ,EAAS,SAAAG,GACP,OAAOL,EAAQ,KAOnB,OACEkB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBAAUzB,GACVuB,EAAAC,EAAAC,cAAA,mBAAWpB,GACXkB,EAAAC,EAAAC,cAAA,2BAAmBJ,GACnBE,EAAAC,EAAAC,cAAA,SACEC,KAAK,OACL1B,KAAK,OACL2B,aAAc3B,EACd4B,SAAU,SAAAC,GAAC,OAAI5B,EAAQ4B,EAAEC,OAAOC,QAChCC,IAAKpB,IAEPW,EAAAC,EAAAC,cAAA,UAAQQ,QAhBY,WACtBrB,EAAasB,QAAQC,UAenB,eACAZ,EAAAC,EAAAC,cAAA,UAAQQ,QAASd,GAAjB,qBAKS1B","file":"static/js/3.98f2015e.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from 'react';\n\nexport const TestComponent = props => {\n  const [name, setName] = useState(\"name\");\n  // функция выполняется, а состояние живет в глубинах движка\n  const [count, setCount] = useState(props.count ** 2);\n  const [prevCount, setPrevCount] = useState(null);\n  const textInputRef = useRef(null);\n  \n  useEffect(\n    () => {\n      console.log(\"componentDidMount\");\n      const timer = setTimeout(_incr, 1000);\n      \n      return () => {\n        console.log(\"componentWillUnmount при удалении компонента\");\n        clearTimeout(timer);\n      };\n    },\n    [1]\n  );\n  \n  useEffect(() => {\n    console.log(\"componentDidUpdate\", props);\n    \n    if (props.count !== prevCount) {\n      setPrevCount(props.count);\n      setCount(props.count ** 2);\n    }\n  \n    return () => {\n      console.log(\"componentWillUnmount при перерендере компонента\");\n    };\n  });\n  \n  const memoizedValue = useMemo(\n    () => {\n      console.log(\"вызывается при изменении count\");\n      return count << 5;\n    },\n    [count]\n  );\n  \n  const _incr = () =>\n    setCount(prevCount => {\n      return count + 1;\n    });\n  \n  const setFocusToInput = () => {\n    textInputRef.current.focus();\n  };\n  \n  return (\n    <div>\n      <p>name: {name}</p>\n      <p>count: {count}</p>\n      <p>memoizedValue: {memoizedValue}</p>\n      <input\n        type=\"text\"\n        name=\"name\"\n        defaultValue={name}\n        onChange={e => setName(e.target.value)}\n        ref={textInputRef}\n      />\n      <button onClick={setFocusToInput}>focus input</button>\n      <button onClick={_incr}>increment count</button>\n    </div>\n  );\n};\n\nexport default TestComponent;\n"],"sourceRoot":""}